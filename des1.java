package des1;
/*
 * @file: AES.java
 * @author Zach Stecher
 * @Class: MSCS630 - Security Algorithms and Protocols
 * @Assignment: Final Project
 * 
 * This file contains the methods to generate AES cipher round
 * keys given a secret key as a hex value String.
 * 
 * This file encrypts and decrypts plaintext messages using 128,
 * 192, or 256-bit aes encryption keys from the driver file.
 *
 */

public class des1 {
  
  public String[][] K = new String[4][8];		// Initialize to handle largest possible input...
  public String[][] W = new String[4][60];		// Only use what is necessary...
  public String[][] pTextHexMat = new String[4][4];
  public String[][] cTextHex = new String[4][4];
  public int rounds = 0;
  public int columns = 0;
  public int keySize = 0;
  /*
   * Initialization of variables and matrices
   */

  
  /*
   * This is the s-box initialization as a matrix
   */
  static char s[][] = 
	  {
	     {0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB},
	     {0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB},
	     {0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E},
	     {0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25},
	     {0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92},
	     {0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84},
	     {0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06},
	     {0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B},
	     {0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73},
	     {0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E},
	     {0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B},
	     {0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4},
	     {0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F},
	     {0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF},
	     {0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61},
	     {0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D}
	  };
  
  /*
   * Initialize the rcon box as a matrix
   */
  static char rcon[] = {
      0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 
      0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 
      0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 
      0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 
      0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 
      0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 
      0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 
      0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 
      0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 
      0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 
      0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 
      0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 
      0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 
      0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 
      0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 
      0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d
  };
  
  /*
   * Lookup tables for the Galois field
   */
  
  public static int[] mc14 = {
          0x00,0x0e,0x1c,0x12,0x38,0x36,0x24,0x2a,0x70,0x7e,0x6c,0x62,0x48,0x46,0x54,0x5a,
0xe0,0xee,0xfc,0xf2,0xd8,0xd6,0xc4,0xca,0x90,0x9e,0x8c,0x82,0xa8,0xa6,0xb4,0xba,
0xdb,0xd5,0xc7,0xc9,0xe3,0xed,0xff,0xf1,0xab,0xa5,0xb7,0xb9,0x93,0x9d,0x8f,0x81,
0x3b,0x35,0x27,0x29,0x03,0x0d,0x1f,0x11,0x4b,0x45,0x57,0x59,0x73,0x7d,0x6f,0x61,
0xad,0xa3,0xb1,0xbf,0x95,0x9b,0x89,0x87,0xdd,0xd3,0xc1,0xcf,0xe5,0xeb,0xf9,0xf7,
0x4d,0x43,0x51,0x5f,0x75,0x7b,0x69,0x67,0x3d,0x33,0x21,0x2f,0x05,0x0b,0x19,0x17,
0x76,0x78,0x6a,0x64,0x4e,0x40,0x52,0x5c,0x06,0x08,0x1a,0x14,0x3e,0x30,0x22,0x2c,
0x96,0x98,0x8a,0x84,0xae,0xa0,0xb2,0xbc,0xe6,0xe8,0xfa,0xf4,0xde,0xd0,0xc2,0xcc,
0x41,0x4f,0x5d,0x53,0x79,0x77,0x65,0x6b,0x31,0x3f,0x2d,0x23,0x09,0x07,0x15,0x1b,
0xa1,0xaf,0xbd,0xb3,0x99,0x97,0x85,0x8b,0xd1,0xdf,0xcd,0xc3,0xe9,0xe7,0xf5,0xfb,
0x9a,0x94,0x86,0x88,0xa2,0xac,0xbe,0xb0,0xea,0xe4,0xf6,0xf8,0xd2,0xdc,0xce,0xc0,
0x7a,0x74,0x66,0x68,0x42,0x4c,0x5e,0x50,0x0a,0x04,0x16,0x18,0x32,0x3c,0x2e,0x20,
0xec,0xe2,0xf0,0xfe,0xd4,0xda,0xc8,0xc6,0x9c,0x92,0x80,0x8e,0xa4,0xaa,0xb8,0xb6,
0x0c,0x02,0x10,0x1e,0x34,0x3a,0x28,0x26,0x7c,0x72,0x60,0x6e,0x44,0x4a,0x58,0x56,
0x37,0x39,0x2b,0x25,0x0f,0x01,0x13,0x1d,0x47,0x49,0x5b,0x55,0x7f,0x71,0x63,0x6d,
0xd7,0xd9,0xcb,0xc5,0xef,0xe1,0xf3,0xfd,0xa7,0xa9,0xbb,0xb5,0x9f,0x91,0x83,0x8d
};

  public static int[] mc13 = {   
              0x00,0x0d,0x1a,0x17,0x34,0x39,0x2e,0x23,0x68,0x65,0x72,0x7f,0x5c,0x51,0x46,0x4b,
0xd0,0xdd,0xca,0xc7,0xe4,0xe9,0xfe,0xf3,0xb8,0xb5,0xa2,0xaf,0x8c,0x81,0x96,0x9b,
0xbb,0xb6,0xa1,0xac,0x8f,0x82,0x95,0x98,0xd3,0xde,0xc9,0xc4,0xe7,0xea,0xfd,0xf0,
0x6b,0x66,0x71,0x7c,0x5f,0x52,0x45,0x48,0x03,0x0e,0x19,0x14,0x37,0x3a,0x2d,0x20,
0x6d,0x60,0x77,0x7a,0x59,0x54,0x43,0x4e,0x05,0x08,0x1f,0x12,0x31,0x3c,0x2b,0x26,
0xbd,0xb0,0xa7,0xaa,0x89,0x84,0x93,0x9e,0xd5,0xd8,0xcf,0xc2,0xe1,0xec,0xfb,0xf6,
0xd6,0xdb,0xcc,0xc1,0xe2,0xef,0xf8,0xf5,0xbe,0xb3,0xa4,0xa9,0x8a,0x87,0x90,0x9d,
0x06,0x0b,0x1c,0x11,0x32,0x3f,0x28,0x25,0x6e,0x63,0x74,0x79,0x5a,0x57,0x40,0x4d,
0xda,0xd7,0xc0,0xcd,0xee,0xe3,0xf4,0xf9,0xb2,0xbf,0xa8,0xa5,0x86,0x8b,0x9c,0x91,
0x0a,0x07,0x10,0x1d,0x3e,0x33,0x24,0x29,0x62,0x6f,0x78,0x75,0x56,0x5b,0x4c,0x41,
0x61,0x6c,0x7b,0x76,0x55,0x58,0x4f,0x42,0x09,0x04,0x13,0x1e,0x3d,0x30,0x27,0x2a,
0xb1,0xbc,0xab,0xa6,0x85,0x88,0x9f,0x92,0xd9,0xd4,0xc3,0xce,0xed,0xe0,0xf7,0xfa,
0xb7,0xba,0xad,0xa0,0x83,0x8e,0x99,0x94,0xdf,0xd2,0xc5,0xc8,0xeb,0xe6,0xf1,0xfc,
0x67,0x6a,0x7d,0x70,0x53,0x5e,0x49,0x44,0x0f,0x02,0x15,0x18,0x3b,0x36,0x21,0x2c,
0x0c,0x01,0x16,0x1b,0x38,0x35,0x22,0x2f,0x64,0x69,0x7e,0x73,0x50,0x5d,0x4a,0x47,
0xdc,0xd1,0xc6,0xcb,0xe8,0xe5,0xf2,0xff,0xb4,0xb9,0xae,0xa3,0x80,0x8d,0x9a,0x97
};
  
  public static int[] mc11 = {   
             0x00,0x0b,0x16,0x1d,0x2c,0x27,0x3a,0x31,0x58,0x53,0x4e,0x45,0x74,0x7f,0x62,0x69,
0xb0,0xbb,0xa6,0xad,0x9c,0x97,0x8a,0x81,0xe8,0xe3,0xfe,0xf5,0xc4,0xcf,0xd2,0xd9,
0x7b,0x70,0x6d,0x66,0x57,0x5c,0x41,0x4a,0x23,0x28,0x35,0x3e,0x0f,0x04,0x19,0x12,
0xcb,0xc0,0xdd,0xd6,0xe7,0xec,0xf1,0xfa,0x93,0x98,0x85,0x8e,0xbf,0xb4,0xa9,0xa2,
0xf6,0xfd,0xe0,0xeb,0xda,0xd1,0xcc,0xc7,0xae,0xa5,0xb8,0xb3,0x82,0x89,0x94,0x9f,
0x46,0x4d,0x50,0x5b,0x6a,0x61,0x7c,0x77,0x1e,0x15,0x08,0x03,0x32,0x39,0x24,0x2f,
0x8d,0x86,0x9b,0x90,0xa1,0xaa,0xb7,0xbc,0xd5,0xde,0xc3,0xc8,0xf9,0xf2,0xef,0xe4,
0x3d,0x36,0x2b,0x20,0x11,0x1a,0x07,0x0c,0x65,0x6e,0x73,0x78,0x49,0x42,0x5f,0x54,
0xf7,0xfc,0xe1,0xea,0xdb,0xd0,0xcd,0xc6,0xaf,0xa4,0xb9,0xb2,0x83,0x88,0x95,0x9e,
0x47,0x4c,0x51,0x5a,0x6b,0x60,0x7d,0x76,0x1f,0x14,0x09,0x02,0x33,0x38,0x25,0x2e,
0x8c,0x87,0x9a,0x91,0xa0,0xab,0xb6,0xbd,0xd4,0xdf,0xc2,0xc9,0xf8,0xf3,0xee,0xe5,
0x3c,0x37,0x2a,0x21,0x10,0x1b,0x06,0x0d,0x64,0x6f,0x72,0x79,0x48,0x43,0x5e,0x55,
0x01,0x0a,0x17,0x1c,0x2d,0x26,0x3b,0x30,0x59,0x52,0x4f,0x44,0x75,0x7e,0x63,0x68,
0xb1,0xba,0xa7,0xac,0x9d,0x96,0x8b,0x80,0xe9,0xe2,0xff,0xf4,0xc5,0xce,0xd3,0xd8,
0x7a,0x71,0x6c,0x67,0x56,0x5d,0x40,0x4b,0x22,0x29,0x34,0x3f,0x0e,0x05,0x18,0x13,
0xca,0xc1,0xdc,0xd7,0xe6,0xed,0xf0,0xfb,0x92,0x99,0x84,0x8f,0xbe,0xb5,0xa8,0xa3
};

public static int[] mc9 = {   
             0x00,0x09,0x12,0x1b,0x24,0x2d,0x36,0x3f,0x48,0x41,0x5a,0x53,0x6c,0x65,0x7e,0x77,
0x90,0x99,0x82,0x8b,0xb4,0xbd,0xa6,0xaf,0xd8,0xd1,0xca,0xc3,0xfc,0xf5,0xee,0xe7,
0x3b,0x32,0x29,0x20,0x1f,0x16,0x0d,0x04,0x73,0x7a,0x61,0x68,0x57,0x5e,0x45,0x4c,
0xab,0xa2,0xb9,0xb0,0x8f,0x86,0x9d,0x94,0xe3,0xea,0xf1,0xf8,0xc7,0xce,0xd5,0xdc,
0x76,0x7f,0x64,0x6d,0x52,0x5b,0x40,0x49,0x3e,0x37,0x2c,0x25,0x1a,0x13,0x08,0x01,
0xe6,0xef,0xf4,0xfd,0xc2,0xcb,0xd0,0xd9,0xae,0xa7,0xbc,0xb5,0x8a,0x83,0x98,0x91,
0x4d,0x44,0x5f,0x56,0x69,0x60,0x7b,0x72,0x05,0x0c,0x17,0x1e,0x21,0x28,0x33,0x3a,
0xdd,0xd4,0xcf,0xc6,0xf9,0xf0,0xeb,0xe2,0x95,0x9c,0x87,0x8e,0xb1,0xb8,0xa3,0xaa,
0xec,0xe5,0xfe,0xf7,0xc8,0xc1,0xda,0xd3,0xa4,0xad,0xb6,0xbf,0x80,0x89,0x92,0x9b,
0x7c,0x75,0x6e,0x67,0x58,0x51,0x4a,0x43,0x34,0x3d,0x26,0x2f,0x10,0x19,0x02,0x0b,
0xd7,0xde,0xc5,0xcc,0xf3,0xfa,0xe1,0xe8,0x9f,0x96,0x8d,0x84,0xbb,0xb2,0xa9,0xa0,
0x47,0x4e,0x55,0x5c,0x63,0x6a,0x71,0x78,0x0f,0x06,0x1d,0x14,0x2b,0x22,0x39,0x30,
0x9a,0x93,0x88,0x81,0xbe,0xb7,0xac,0xa5,0xd2,0xdb,0xc0,0xc9,0xf6,0xff,0xe4,0xed,
0x0a,0x03,0x18,0x11,0x2e,0x27,0x3c,0x35,0x42,0x4b,0x50,0x59,0x66,0x6f,0x74,0x7d,
0xa1,0xa8,0xb3,0xba,0x85,0x8c,0x97,0x9e,0xe9,0xe0,0xfb,0xf2,0xcd,0xc4,0xdf,0xd6,
0x31,0x38,0x23,0x2a,0x15,0x1c,0x07,0x0e,0x79,0x70,0x6b,0x62,0x5d,0x54,0x4f,0x46
};





  
  /*
   * Method: aesRoundKeys
   * 
   * Parameters:
   * 
   * Input
   *    keyHex - the secret key in hex format
   * 
   * Method for generating the table W to be used as the round keys.
   * Copies K into the first 4 columns, then follows the key schedule to
   * fill the rest of the table.
   */
  
  public void aesRoundKeys(String keyHex){
	keySize = (keyHex.length() / 8);
    initialRoundKeys(keyHex);
    if(keyHex.length() == 32) {
    	columns = 44;
    	rounds = 10;
    }
    if(keyHex.length() == 48) {
    	columns = 52;
    	rounds = 12;
    }
    if(keyHex.length() == 64) {
    	columns = 60;
    	rounds = 14;
    }
    int sLookup = 0; // Used to determine whether or not to do the extra Sbox lookup for 256-bit
    for (int i = keySize; i < columns; i++){
      //if ((i%4) == 0) System.out.println("");
      if ((i%keySize) == 0 && sLookup == 0){ // if the column IS divisible by the key size...
          String[] Wnew = new String[4];
          for(int k = 0; k < 4; k++){   // Copy the previous column into a temporary storage area
            Wnew[k] = W[k][i-1];
          }
        
          String temp = Wnew[0];    // Store the first index in an outside value
          for (int l = 0; l < 3; l++){  // Rotate all indexes left by 1 spot
            Wnew[l] = Wnew[l+1];
          }
          Wnew[3] = temp;   // Place the first index at the end, completing the left rotation
          
        
          for(int m = 0; m < 4; m++){   // Perform the S-box substitution plus the rcon XOR
            Wnew[m] = aesSbox(Wnew[m]);
            if (m == 0){                // Only perform the rcon XOR on the first byte of Wnew
              Wnew[m] = aesRcon(Wnew[m], i);
            }
            W[m][i] = roundXOR(Wnew[m], W[m][i-keySize]);
           //System.out.print(W[m][i]);
          }
          if (columns == 60) sLookup = 1;
        
      }
      else if (columns == 60 && (i%4) == 0 && sLookup == 1){
        String[] Wnew = new String[4];
        for(int k = 0; k < 4; k++){   // Copy the previous column into a temporary storage area
          Wnew[k] = W[k][i-1];
        }
        for(int m = 0; m < 4; m++){   // Perform the S-box substitution plus the rcon XOR
            Wnew[m] = aesSbox(Wnew[m]);
            W[m][i] = roundXOR(Wnew[m], W[m][i-keySize]);
          }
        sLookup = 0;
        
      }
      else{  // once we pass the first columns, if the column is not divisible by the key size...
        for (int j = 0; j < 4; j++){
            W[j][i] = roundXOR(W[j][i-1], W[j][i-keySize]);
            //System.out.print(W[j][i]);
        }
      }
    }
  }
  
  
  /*
   * Method: aesSbox
   * 
   * Parameters:
   * 
   * Input
   *    inHex - The single byte hex value to be used in the S-box lookup
   * 
   * Output
   *    result - The corresponding single byte hex value gotten from the S-box
   *    
   *    
   * This method takes a hex pair string argument and performs the S-box lookup
   * by splitting the pair into 2 separate characters, converting them to their
   * decimal value, and matching the corresponding pair on the table.
   */
  
  private String aesSbox(String inHex){
    int slookup1 = hex2decimal(inHex.substring(0, 1));
    int slookup2 = hex2decimal(inHex.substring(1, inHex.length()));
    String result = Integer.toHexString(s[slookup1][slookup2]);
    if(result.length() < 2){    // Clunky way to temporarily fix the 0 trimming problem
      result = "0" + result;
    }
    return result;
  }
  
  /*
   * Method: aesRcon
   * 
   * Parameters:
   * 
   * Input
   *    s - The single byte hex value to be XORed with the rcon value
   *    round - the numerical round value to be used in determining which rcon value to use
   *    
   * Output
   *    result - The single byte hex value that results from XORing s with the rcon value
   *    
   * This method handles the rcon lookup and XOR for AES round key generation.
   * 
   */
  
  private String aesRcon(String s, int round){
    int rlookup = (int) Math.floor(round/keySize);
    String rlookupXOR = Integer.toHexString(rcon[rlookup]);
    String result = Integer.toHexString((hex2decimal(s) ^ hex2decimal(rlookupXOR)));  // Couldn't get this to work with roundXOR method...
    if(result.length() < 2){    // Clunky way to temporarily fix the 0 trimming problem
      result = "0" + result;
    }
    return result;
  }
  
  /*
   * Method: initialRoundKeys
   * 
   * Parameters:
   * 
   * Input
   *    s - the 16 byte secret key
   *     
   * Method for inputting the secret key into matrix K.
   * Pass the key string in as an argument, split the String into pairs
   * and insert each pair into an index of K.
   */
  private void initialRoundKeys(String s){
    int counter = 0;
    for(int i = 0; i < keySize; i++){
      for (int j = 0; j < 4; j++){
        K[j][i] = s.substring(counter, (counter + 2));
        W[j][i] = K[j][i];
        counter = counter + 2;
      }
    }
  }
  
  /*
   * Method: pTextHexMatrix
   * 
   * Parameters:
   * 
   * Input
   *    s - the plaintext string to be put into the matrix
   *    
   * Helper method to convert a hex string to a hex matrix
   */
  private void pTextHexMatrix(String s){
    int counter = 0;
    for (int i = 0; i < 4; i++){
      for (int j = 0; j < 4; j++){
        pTextHexMat[i][j] = s.substring(counter, (counter + 2));
        counter = counter + 2;
      }
    }
  }
  
  /*
   * Method: roundXOR
   * 
   * Parameters:
   * 
   * Input
   *    s - The first single byte hex value to be XORed
   *    t - The second single byte hex value to be XORed
   *    
   * Output
   *    result - The resulting single byte hex value derived from
   *    XORing s and t.
   *    
   * This method handles the XORing of two single byte values by splitting them in half,
   * converting them to decimal format and then performing the XOR, then converting them
   * back to a String.
   * 
   */
  
  private String roundXOR (String s, String t){
    int a = hex2decimal(s.substring(0, 1));
    int b = hex2decimal(s.substring(1, s.length()));
    int c = hex2decimal(t.substring(0, 1));
    int d = hex2decimal(t.substring(1, t.length()));
    
    String e = Integer.toHexString(a^c);
    String f = Integer.toHexString(b^d);
    String result = e + f;
    return result;
  }
    
  /*
   * hex2decimal
   *
   * This method takes a hexadecimal string value s and transforms it into 
   * its corresponding decimal value val.
   *
   * Parameters
   *    s - The String we are converting to decimal
   *    
   * Returns
   *    val - The decimal representation of the String "s"
   */
    public static int hex2decimal(String s) {
      String digits = "0123456789ABCDEF";
      s = s.toUpperCase();
      int val = 0;
      for (int i = 0; i < s.length(); i++) {
          char c = s.charAt(i);
          int d = digits.indexOf(c);
          val = 16*val + d;
      }
      return val;
  }
 
    
 /*
  * The following methods perform the encryption for the AES algorithm...   
  */
    
    /*
     * Method aes
     * 
     * Parameters:
     * 
     * Input
     *    pTextHex - The plaintext we want to encrypt (in Hex form)
     *    keyHex - The key we are using to encrypt the plaintext
     *    
     * Output
     *    cTextHex - The ciphertext we get from performing aes.
     *    
     * This method takes a plaintext block of 4x4 and combines it with the 128-bit
     * key to encrypt a message and provide us with a ciphertext.
     */
    
    public String[][] aesDecrypt(String pTextHex, String[][] keyHex){
      
      
      pTextHexMatrix(pTextHex);
      String[][] cTextHex = new String[4][4];
      String[][] roundKey = new String[4][4];
      roundKey = K;
      // Perform the initial Add Key
      cTextHex = aesStateXOR(pTextHexMat, roundKey);
      
      // Start the 9 normal rounds of decryption...
      for(int i =(rounds); i < 9; i--){
        for (int j = 0; j < 4; j++){
          for (int k = 0; k < 4; k++){
            roundKey[k][j] = keyHex[k][(i*4)+j];
          }
        }

	if (i != 0){
	  cTextHex = aesNibbleSub(cTextHex);
          cTextHex = aesShiftRow(cTextHex);
          cTextHex = aesMixColumn(cTextHex);
          cTextHex = aesStateXOR(cTextHex, roundKey);
	}
      }
      // One more time without MixColumns...
      cTextHex = aesNibbleSub(cTextHex);
      cTextHex = aesShiftRow(cTextHex);
      cTextHex = aesStateXOR(cTextHex, roundKey);
            
      for(int i = 0; i < 4; i++){
        for(int j = 0; j < 4; j++){
	  System.out.print(cTextHex[i][j].toUpperCase());
        }
      }
      return cTextHex;
    }
    
    /*
     * Method: aesStateXOR
     * Parameters:
     * 
     * Input
     *    sHex - The state matrix that we are encrypting
     *    keyHex - The key that we are XORing with the state matrix
     *    
     * Output
     *    outStateHex - The state matrix after it has been XORed with the key
     *
     * This method takes the state input "sHex" and XORs it with
     * the current round's key "keyHex", and returns the result
     * "outStateHex".
     */

  public String[][] aesStateXOR(String[][] sHex, String[][] keyHex){
    String[][] outStateHex = new String[4][4];
    for (int i = 0; i < 4; i++){
      for(int j = 0; j < 4; j++){
        outStateHex[j][i] = roundXOR(sHex[j][i], keyHex[i][j]);
      }
    }
    return outStateHex;
  }
    
    /*
     * Method: aesNibbleSub
     * 
     * Parameters:
     * 
     * Input
     *    inStateHex - The state matrix on which we are performing the substitutions
     *    
     * Output
     *    outStateHex - The state matrix after the substitutions
     * 
     * This method takes a 4x4 matrix input(the "state") and performs the
     * Sbox substitution, outputting the result.
     */
    
    public String[][] aesNibbleSub(String[][] inStateHex){
      String[][] outStateHex = new String[4][4];
      for(int i = 0; i < 4; i++){
        for (int j = 0; j < 4; j++){
          outStateHex[j][i] = aesSbox(inStateHex[j][i]);
        }
      }
      return outStateHex;
    }
    
    /*
     * Method: aesShiftRow
     * 
     * Parameters
     * 
     * Input 
     *    inStateHex - the state matrix we are performing the shiftRow on
     * 
     * Output 
     *    outStateHex - The state matrix after the shiftRow is performed
     * 
     * This method takes a 4x4 matrix input(the "state") and shifts each
     * row to the left in increasing increment (0, 1, 2, 3).
     */
    
    public String[][] aesShiftRow(String[][] inStateHex){
      int counter = 0;
      String[][] outStateHex = new String[4][4];
      String[] tempVector = new String[4];
      
      for (int i = 0; i < 4; i++){
        //copy into new vector for manipulation
        for (int j = 0; j < 4; j++){
          tempVector[j] = inStateHex[j][i];
        }
	
        // using the counter as a row marker, perform a left shift
        // that many times...
        for(int k = 0; k < counter; k++){
          String temp = tempVector[3];
          tempVector[3] = tempVector[2];
          tempVector[2] = tempVector[1];
          tempVector[1] = tempVector[0];
          tempVector[0] = temp;
        }
        // Copy the result into outStateHex
        for (int n = 0; n < 4; n++){
          outStateHex[n][i] = tempVector[n];
        }
        counter++;
      }
      return outStateHex;
    }
    
    /*
     * Method: aesMixColumn
     * 
     * Parameters:
     * 
     * Input
     *    inStateHex - The current state matrix
     * 
     * Output
     *    outStateHex - The state matrix after performing the MixColumn step
     *    
     * This method performs the MixColumn step of AES utilizing multiplication
     * lookup tables rather than Galois matrix multiplication.
     */
    public String[][] aesMixColumn(String[][] inStateHex){
      String[][] outStateHex = new String[4][4];
      int a[] = new int[4];
      int r[] = new int[4];
      
      for (int i = 0; i < 4; i++){
        for (int j = 0; j < 4; j++){
          a[j] = hex2decimal(inStateHex[i][j]);
        }
        
        // Perform the table lookups and XORs
        r[0] = mc14[a[0]] ^ mc11[a[1]] ^ mc13[a[2]] ^ mc9[a[3]];
        r[1] = mc9[a[0]] ^ mc14[a[1]] ^ mc11[a[2]] ^ mc13[a[3]];
        r[2] = mc13[a[0]] ^ mc9[a[1]] ^ mc14[a[2]] ^ mc11[a[3]];
        r[3] = mc11[a[0]] ^ mc13[a[1]] ^ mc9[a[2]] ^ mc14[a[3]];
        
        for (int k = 0; k < 4; k++){
	  outStateHex[i][k] = Integer.toHexString(r[k]);
	}
      
	for (int k = 0; k < 4; k++){
	  if(outStateHex[i][k].length() < 2){
	    outStateHex[i][k] = "0" + Integer.toHexString(r[k]);
	  }
	}
      }
      return outStateHex;
    }
}